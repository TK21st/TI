#include "Energia.h"


void setup();
void loop();


void setup() {
  // put your setup code here, to run once:
#include "msp430g2553.h"        //must include so compiler knows what each variable means

	    WDTCTL = WDTPW + WDTHOLD;   // Stop WDT

	    if (CALBC1_1MHZ == 0xFF || CALDCO_1MHZ == 0xff)
	        while(1); // Erased calibration data? Trap!

	    BCSCTL1 = CALBC1_1MHZ; // Set the DCO to 1 MHz
	    DCOCTL = CALDCO_1MHZ; // And load calibration data

	    P1OUT &= BIT0; // intialize P1 LED output to be 0(OFF)
	    P1DIR |= BIT0; // Assign P1 to be output. Make last bit of P1DIR register to be 1.

}

void loop() {
  // put your main code here, to run repeatedly: 
	/*
	 * ELEC 327
	 * Lab 1 skeleton code.
	 *
	 * In general, you should not use __delay_cycles, as it locks/uses the CPU
	 * during this time, and can't be used to compute anything else (while consuming
	 * power).
	 *
	 * However, in Lab 1, the goal is for you to focus on the concept of the basic
	 * non-terminating architecture of all embedded systems - there is some setup code,
	 * and then the CPU essentially runs in an infinite loop.
	 *
	 */
//int m[18]={1,1,1,1,1,3,3,1,3,1,3,3,1,1,1,1,1,7};
	//SOS: ...---...(6 dots, 3 dashes, 6 spaces within letters, 2 spaces between letters,1 word delay)
char m[]={"... --- ..."};
int i;
int d;
int f;
int length=sizeof(m)/sizeof(m[0]);


	    while (1) {
	    	for (i=0;i<=length;i++){
	    	//check if is dot or dash.
	    	//within each letter there is 1 unit delay between dots/dashes
	    	// between letters there is 3 unit delay ( add extra 2 to existing 1);
	    	  if (m[i]==' '){ //check if the letter is space
	    		P1OUT &= 0;// Toggle output
	    		for (d=0; d<=14; d++){     // 1 unit delay between letters
	    		  __delay_cycles(50000);
	    		 }
	    		}

	    	  else{

	    		  if (m[i]=='.')
	    			f=1;
	    		  else if (m[i]=='-')
	    			f=3;


	    		P1OUT |= BIT0;

	    		for (d=0; d<=(5*f-1); d++){     // to make 1 unit become 1/4 second
	    			__delay_cycles(50000);
	    		}


    			P1OUT &= 0;// Toggle output
    			for (d=0; d<=4; d++){     // 1 unit delay between letters
    				__delay_cycles(50000);
    			}
	    	}
	    	//there is a 7 unit delay here
	    	P1OUT &= 0;
	    	for (d=0; d<=34; d++){     // a 7 unit delay after each word
	    		__delay_cycles(50000);
	    	}
	    	}
	    }


}


